const CreateChannel=()=>({pos:0,playing:!1,sample:null,speed:0,loops:0});class SfxRawProcessor extends AudioWorkletProcessor{_ready=!1;_playing=!1;_channels=new Array(4).fill(null).map((()=>({pos:0,playing:!1,sample:null,speed:0,loops:0})));_mixingRate=0;constructor(){super(),this.port.onmessage=this.handleMessage.bind(this)}handleMessage(s){switch(s.data.message){case"init":console.log("[soundProcessor] setting mixingRate to",s.data.mixingRate),this._ready=!0,this._mixingRate=s.data.mixingRate;break;case"play":{const{sound:e,channel:a}=s.data;this.play(e,a),this._playing=!0;break}case"stop":{const{channel:e}=s.data;this._channels[e].playing=!1}}}play(s,e){const a=this._channels[e];a.playing=!0,a.sample=s.sample,a.pos=0,a.speed=s.freq/this._mixingRate,a.loops=s.loops,a.volume=s.volume}mixChannels(s,e){for(let a=0;a<e;++a)for(let e=0;e<this._channels.length;++e){const n=this._channels[e];if(n.playing){const e=n.sample[Math.floor(n.pos)]*n.volume/63;s[0][a]+=e/128,n.pos+=n.speed,n.pos>n.sample.length-1&&(-1===n.loops?n.pos=n.sample.length-n.pos:n.playing=!1)}}}process(s,e,a){return this._ready&&this.mixChannels(e[0],e[0][0].length),!0}}registerProcessor("sfxraw-processor",SfxRawProcessor);